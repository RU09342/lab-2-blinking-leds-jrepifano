#include <msp430.h>

#define LED_0 BIT0
#define LED_1 BIT6
#define LED_OUT P1OUT
#define LED_DIR P1DIR
#define BUTTON BIT3

unsigned int blink = 0;

int main(void)
{
  WDTCTL = WDTPW + WDTHOLD;                 // Stop WDT
  if (CALBC1_1MHZ==0xFF)					// If calibration constant erased
  {											
    while(1);                               // do not load, trap CPU!!	
  }
  DCOCTL = 0;                               // Select lowest DCOx and MODx settings
  BCSCTL1 = CALBC1_1MHZ;                    // Set DCO
  DCOCTL = CALDCO_1MHZ;
  P1SEL = BIT1 + BIT2 ;                     // P1.1 = RXD, P1.2=TXD
  P1SEL2 = BIT1 + BIT2 ;                    // P1.1 = RXD, P1.2=TXD
  UCA0CTL1 |= UCSSEL_2;                     // SMCLK
  UCA0BR0 = 104;                            // 1MHz 9600
  UCA0BR1 = 0;                              // 1MHz 9600
  UCA0MCTL = UCBRS0;                        // Modulation UCBRSx = 1
  UCA0CTL1 &= ~UCSWRST;                     // **Initialize USCI state machine**
  IE2 |= UCA0RXIE;                          // Enable USCI_A0 RX interrupt

  WDTCTL = WDTPW + WDTHOLD; // Stop watchdog timer
  LED_DIR |= (LED_0 + LED_1); // Set P1.0 and P1.6 to output direction
  LED_OUT &= ~(LED_0 + LED_1); // Set the LEDs off
  P1REN |= BUTTON; //Enables a puller-Resistor on the button-pin
  P1OUT |= BUTTON; //Writes a "1" to the portpin, tellling the resistor to pullup
  P1IES |= BUTTON; //Triggers when you PRESS the button :: Pick one...
  //P1IES &= ~BUTTON; // Triggers when you RELEASE the button :: ...or pick the other
  P1IE |= BUTTON; //Enables the selector-mask for generating interrupts on the relevant pin

  __enable_interrupt(); // Interrupts get enabled *here* - they were disabled thus far..

  for (;;)
  {

  if(blink > 0)
  {
  P1OUT ^= (LED_0 + LED_1); // Toggle P1.0 and P1.6 using exclusive-OR

  __delay_cycles(100000); // SW Delay of 10000 cycles at 1Mhz

  }
  }

  }

  // Port 1 interrupt service routine
  #pragma vector=PORT1_VECTOR
  __interrupt void Port_1(void)
  {
  blink ^= 0x01;
  P1IFG &= ~BUTTON; // P1.3 IFG cleared
  LED_OUT &= ~(LED_0 + LED_1); // Clear the LEDs so they start in OFF state






  __bis_SR_register(LPM0_bits + GIE);       // Enter LPM0, interrupts enabled
}

//  Echo back RXed character, confirm TX buffer is ready first
#if defined(__TI_COMPILER_VERSION__) || defined(__IAR_SYSTEMS_ICC__)
#pragma vector=USCIAB0RX_VECTOR
__interrupt void USCI0RX_ISR(void)
#elif defined(__GNUC__)
void __attribute__ ((interrupt(USCIAB0RX_VECTOR))) USCI0RX_ISR (void)
#else
#error Compiler not supported!
#endif
{
  while (!(IFG2&UCA0TXIFG));                // USCI_A0 TX buffer ready?
  UCA0TXBUF = UCA0RXBUF;                    // TX -> RXed character
}
